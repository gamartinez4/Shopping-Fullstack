<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HotChocolate.Language.Web</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            /// <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:HotChocolate.Language.IDocumentCache">
            <summary>
            The document cache is ues to cache parsed syntax trees.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.IDocumentCache.Capacity">
            <summary>
            Gets maximum amount of GraphQL syntax trees that can be cached. The default
            value is <c>100</c>. The minimum allowed value is <c>10</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.IDocumentCache.Count">
            <summary>
            Gets the amount of compiled queries residing in the cache.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IDocumentCache.TryGetDocument(System.String,HotChocolate.Language.DocumentNode@)">
            <summary>
            Tries to get a cached GraphQL syntax tree by its internal <paramref name="documentId"/>.
            </summary>
            <param name="documentId">
            The internal document id.
            </param>
            <param name="document">
            The GraphQL syntax tree.
            </param>
            <returns>
            <c>true</c> if a cached GraphQL syntax tree was found that matches the
            <paramref name="documentId"/>, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.IDocumentCache.TryAddDocument(System.String,HotChocolate.Language.DocumentNode)">
            <summary>
            Tries to add a parsed GraphQL syntax tree to the cache.
            </summary>
            <param name="documentId">
            The internal document id.
            </param>
            <param name="document">
            The GraphQL syntax tree.
            </param>
        </member>
        <member name="M:HotChocolate.Language.IDocumentCache.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
    </members>
</doc>
