<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HotChocolate.Language</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            /// <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="M:HotChocolate.Language.ISyntaxNodeVisitor`1.Enter(`0,HotChocolate.Language.ISyntaxNode,System.Collections.Generic.IReadOnlyList{System.Object},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.ISyntaxNode})">
            <summary>
            Enter is called when the visitation method hit the node and
            is aboute to visit its subtree.
            </summary>
            <param name="node">
            The current node being visited.
            </param>
            <param name="parent">
            The parent immediately above this node, which may be an Array.
            </param>
            <param name="path">
            The index or key to this node from the parent node or Array.
            </param>
            <param name="ancestors">
            All nodes and Arrays visited before reaching parent of this node.
            These correspond to array indices in `path`.
            Note: ancestors includes arrays which contain the parent
            of visited node.
            </param>
        </member>
        <member name="M:HotChocolate.Language.ISyntaxNodeVisitor`1.Leave(`0,HotChocolate.Language.ISyntaxNode,System.Collections.Generic.IReadOnlyList{System.Object},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.ISyntaxNode})">
            <summary>
            Leave is called when the visitation method is about to leave
            this node the full subtree if this node was visited
            when this method is called.
            </summary>
            <param name="node">
            The current node being visited.
            </param>
            <param name="parent">
            The parent immediately above this node, which may be an Array.
            </param>
            <param name="path">
            The index or key to this node from the parent node or Array.
            </param>
            <param name="ancestors">
            All nodes and Arrays visited before reaching parent of this node.
            These correspond to array indices in `path`.
            Note: ancestors includes arrays which contain
            the parent of visited node.
            </param>
        </member>
        <member name="T:HotChocolate.Language.ListExtensions">
            <summary>
            Provides Stack and Queue extensions for <see cref="T:System.Collections.Generic.List`1"/> to
            the visitor APIs.
            </summary>
        </member>
    </members>
</doc>
